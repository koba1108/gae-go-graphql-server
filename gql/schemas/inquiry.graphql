extend type Query {
    inquiries(option: InquirySearchInput): [Inquiry] @hasRole(role: ADMIN)
}

extend type Mutation {
    inquire(detail: InquiryInput): NacodoResponse
    replyToInquiry(inquiryId: String text: String): NacodoResponse @hasRole(role: ADMIN)
    deleteInquiry(inquiryId: String): NacodoResponse @hasRole(role: ADMIN)
}

type Inquiry {
    adminId: String
    deletedDate: Time
    email: String
    id: String
    inquiredDate: Time
    isDeleted: Boolean
    name: String
    reply: Reply # todo: prefix に Inquiry って付けたい
    replyFromId: String
    sendBy: UserType
    tel: String
    text: String
    type: InquiryType
    userId: String
}

type Reply {
    adminId: String
    deletedDate: Time
    email: String
    id: String
    inquiredDate: Time
    isDeleted: Boolean
    name: String
    replyFromId: String
    sendBy: UserType
    tel: String
    text: String
    type: InquiryType
    userId: String
}

input InquiryInput {
    text: String
    type: InquiryType
}

input InquirySearchInput {
    isOrderAsc: Boolean
    type: InquiryType
    userId: String
    adminId: String
    name: String
    email: String
    offset: Int
    sendBy: UserType
    orderBy: String
    isDeleted: Boolean
    tel: String
    to: String
    limit: Int
    from: String
    isAlreadyReply: Boolean
}

enum InquiryType {
    REPORT # 不正ユーザー報告
    SERVICE # サイト・サービス利用
    COVERAGE # 取材依頼等
    OTHER # その他
    PAYMENT # お支払いについて
}

enum UserType {
    ADMIN # 管理者
    USER # ユーザ
}
